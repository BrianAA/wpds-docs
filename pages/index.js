import fs from "fs";
import matter from "gray-matter";
import Link from "next/link";
import path from "path";
import {
  docsFilePaths,
  DOCS_PATH,
  foundationFilePaths,
  FOUNDATION_PATH,
  postFilePaths,
  POSTS_PATH,
  release_notesFilePaths,
  RELEASE_NOTES_PATH
} from "../utils/mdxUtils";

export default function Index({ posts, docs, foundations, release_notes }) {
  return (
    <>
      <h1>Home Page</h1>
      <p>
        Click the link below to navigate to a page generated by{" "}
        <code>next-mdx-remote</code>.
      </p>
      <ul>
        {posts.map(post => (
          <li key={post.filePath}>
            <Link
              as={`/blog/${post.filePath.replace(/\.mdx?$/, "")}`}
              href={`/blog/[slug]`}
            >
              <a>{post.data.title}</a>
            </Link>
          </li>
        ))}
      </ul>
      <h3>Component Docs</h3>
      <ul>
        {docs.map(doc => (
          <li key={doc.filePath}>
            <Link
              as={`/components/${doc.filePath.replace(/\.mdx?$/, "")}`}
              href={`/components/[slug]`}
            >
              <a>{doc.data.title}</a>
            </Link>
          </li>
        ))}
      </ul>
      <h3>Foundations</h3>
      <ul>
        {foundations.map(foundation => (
          <li key={foundation.filePath}>
            <Link
              as={`/foundations/${foundation.filePath.replace(/\.mdx?$/, "")}`}
              href={`/foundations/[slug]`}
            >
              <a>{foundation.data.title}</a>
            </Link>
          </li>
        ))}
      </ul>
      <h3>Release Notes</h3>
      <ul>
        {release_notes.map(note => (
          <li key={note.filePath}>
            <Link
              as={`/release-notes/${note.filePath.replace(/\.mdx?$/, "")}`}
              href={`/release-notes/[slug]`}
            >
              <a>{note.data.title}</a>
            </Link>
          </li>
        ))}
      </ul>
    </>
  );
}

export function getStaticProps() {
  const posts = postFilePaths.map(filePath => {
    const source = fs.readFileSync(path.join(POSTS_PATH, filePath));
    const { content, data } = matter(source);

    return {
      content,
      data,
      filePath
    };
  });

  const docs = docsFilePaths.map(filePath => {
    const source = fs.readFileSync(path.join(DOCS_PATH, filePath));
    const { content, data } = matter(source);
    return {
      content,
      data,
      filePath
    };
  });

  const foundations = foundationFilePaths.map(filePath => {
    const source = fs.readFileSync(path.join(FOUNDATION_PATH, filePath));
    const { content, data } = matter(source);
    return {
      content,
      data,
      filePath
    };
  });

  const release_notes = release_notesFilePaths.map(filePath => {
    const source = fs.readFileSync(path.join(RELEASE_NOTES_PATH, filePath));
    const { content, data } = matter(source);
    return {
      content,
      data,
      filePath
    };
  });

  return { props: { posts, docs, foundations, release_notes } };
}
